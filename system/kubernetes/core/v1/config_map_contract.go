package v1



import (
	"fmt"
"errors"
	"k8s.io/client-go/kubernetes/typed/core/v1"
	vvc "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"	
)

/*autogenerated contract adapter*/

//ConfigMapCreateRequest represents request
type ConfigMapCreateRequest struct {
  service_ v1.ConfigMapInterface
   *vvc.ConfigMap
}

//ConfigMapUpdateRequest represents request
type ConfigMapUpdateRequest struct {
  service_ v1.ConfigMapInterface
   *vvc.ConfigMap
}

//ConfigMapDeleteRequest represents request
type ConfigMapDeleteRequest struct {
  service_ v1.ConfigMapInterface
  Name string
   *metav1.DeleteOptions
}

//ConfigMapDeleteCollectionRequest represents request
type ConfigMapDeleteCollectionRequest struct {
  service_ v1.ConfigMapInterface
   *metav1.DeleteOptions
  ListOptions metav1.ListOptions
}

//ConfigMapGetRequest represents request
type ConfigMapGetRequest struct {
  service_ v1.ConfigMapInterface
  Name string
   metav1.GetOptions
}

//ConfigMapListRequest represents request
type ConfigMapListRequest struct {
  service_ v1.ConfigMapInterface
   metav1.ListOptions
}

//ConfigMapWatchRequest represents request
type ConfigMapWatchRequest struct {
  service_ v1.ConfigMapInterface
   metav1.ListOptions
}

//ConfigMapPatchRequest represents request
type ConfigMapPatchRequest struct {
  service_ v1.ConfigMapInterface
  Name string
  Pt types.PatchType
  Data []byte
  Subresources []string
}


func init() {
	register(&ConfigMapCreateRequest{})
	register(&ConfigMapUpdateRequest{})
	register(&ConfigMapDeleteRequest{})
	register(&ConfigMapDeleteCollectionRequest{})
	register(&ConfigMapGetRequest{})
	register(&ConfigMapListRequest{})
	register(&ConfigMapWatchRequest{})
	register(&ConfigMapPatchRequest{})
}


func (r * ConfigMapCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ConfigMapInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ConfigMapInterface", service)
	}
	return nil
}

func (r * ConfigMapCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.ConfigMap)
	return result, err	
}

func (r * ConfigMapCreateRequest) GetId() string {
	return "v1.ConfigMap.Create";	
}

func (r * ConfigMapUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ConfigMapInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ConfigMapInterface", service)
	}
	return nil
}

func (r * ConfigMapUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.ConfigMap)
	return result, err	
}

func (r * ConfigMapUpdateRequest) GetId() string {
	return "v1.ConfigMap.Update";	
}

func (r * ConfigMapDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ConfigMapInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ConfigMapInterface", service)
	}
	return nil
}

func (r * ConfigMapDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name,r.DeleteOptions)
	return result, err	
}

func (r * ConfigMapDeleteRequest) GetId() string {
	return "v1.ConfigMap.Delete";	
}

func (r * ConfigMapDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ConfigMapInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ConfigMapInterface", service)
	}
	return nil
}

func (r * ConfigMapDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions,r.ListOptions)
	return result, err	
}

func (r * ConfigMapDeleteCollectionRequest) GetId() string {
	return "v1.ConfigMap.DeleteCollection";	
}

func (r * ConfigMapGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ConfigMapInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ConfigMapInterface", service)
	}
	return nil
}

func (r * ConfigMapGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name,r.GetOptions)
	return result, err	
}

func (r * ConfigMapGetRequest) GetId() string {
	return "v1.ConfigMap.Get";	
}

func (r * ConfigMapListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ConfigMapInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ConfigMapInterface", service)
	}
	return nil
}

func (r * ConfigMapListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err	
}

func (r * ConfigMapListRequest) GetId() string {
	return "v1.ConfigMap.List";	
}

func (r * ConfigMapWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ConfigMapInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ConfigMapInterface", service)
	}
	return nil
}

func (r * ConfigMapWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err	
}

func (r * ConfigMapWatchRequest) GetId() string {
	return "v1.ConfigMap.Watch";	
}

func (r * ConfigMapPatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ConfigMapInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ConfigMapInterface", service)
	}
	return nil
}

func (r * ConfigMapPatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name,r.Pt,r.Data,r.Subresources...)
	return result, err	
}

func (r * ConfigMapPatchRequest) GetId() string {
	return "v1.ConfigMap.Patch";	
}
