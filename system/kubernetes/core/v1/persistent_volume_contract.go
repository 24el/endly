package v1



import (
	"fmt"
"errors"
	"k8s.io/client-go/kubernetes/typed/core/v1"
	types "k8s.io/apimachinery/pkg/types"
	vvc "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"	
)

/*autogenerated contract adapter*/

//PersistentVolumeCreateRequest represents request
type PersistentVolumeCreateRequest struct {
  service_ v1.PersistentVolumeInterface
   *vvc.PersistentVolume
}

//PersistentVolumeUpdateRequest represents request
type PersistentVolumeUpdateRequest struct {
  service_ v1.PersistentVolumeInterface
   *vvc.PersistentVolume
}

//PersistentVolumeUpdateStatusRequest represents request
type PersistentVolumeUpdateStatusRequest struct {
  service_ v1.PersistentVolumeInterface
   *vvc.PersistentVolume
}

//PersistentVolumeDeleteRequest represents request
type PersistentVolumeDeleteRequest struct {
  service_ v1.PersistentVolumeInterface
  Name string
   *metav1.DeleteOptions
}

//PersistentVolumeDeleteCollectionRequest represents request
type PersistentVolumeDeleteCollectionRequest struct {
  service_ v1.PersistentVolumeInterface
   *metav1.DeleteOptions
  ListOptions metav1.ListOptions
}

//PersistentVolumeGetRequest represents request
type PersistentVolumeGetRequest struct {
  service_ v1.PersistentVolumeInterface
  Name string
   metav1.GetOptions
}

//PersistentVolumeListRequest represents request
type PersistentVolumeListRequest struct {
  service_ v1.PersistentVolumeInterface
   metav1.ListOptions
}

//PersistentVolumeWatchRequest represents request
type PersistentVolumeWatchRequest struct {
  service_ v1.PersistentVolumeInterface
   metav1.ListOptions
}

//PersistentVolumePatchRequest represents request
type PersistentVolumePatchRequest struct {
  service_ v1.PersistentVolumeInterface
  Name string
  Pt types.PatchType
  Data []byte
  Subresources []string
}


func init() {
	register(&PersistentVolumeCreateRequest{})
	register(&PersistentVolumeUpdateRequest{})
	register(&PersistentVolumeUpdateStatusRequest{})
	register(&PersistentVolumeDeleteRequest{})
	register(&PersistentVolumeDeleteCollectionRequest{})
	register(&PersistentVolumeGetRequest{})
	register(&PersistentVolumeListRequest{})
	register(&PersistentVolumeWatchRequest{})
	register(&PersistentVolumePatchRequest{})
}


func (r * PersistentVolumeCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumeCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.PersistentVolume)
	return result, err	
}

func (r * PersistentVolumeCreateRequest) GetId() string {
	return "v1.PersistentVolume.Create";	
}

func (r * PersistentVolumeUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumeUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.PersistentVolume)
	return result, err	
}

func (r * PersistentVolumeUpdateRequest) GetId() string {
	return "v1.PersistentVolume.Update";	
}

func (r * PersistentVolumeUpdateStatusRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumeUpdateStatusRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.UpdateStatus(r.PersistentVolume)
	return result, err	
}

func (r * PersistentVolumeUpdateStatusRequest) GetId() string {
	return "v1.PersistentVolume.UpdateStatus";	
}

func (r * PersistentVolumeDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumeDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name,r.DeleteOptions)
	return result, err	
}

func (r * PersistentVolumeDeleteRequest) GetId() string {
	return "v1.PersistentVolume.Delete";	
}

func (r * PersistentVolumeDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumeDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions,r.ListOptions)
	return result, err	
}

func (r * PersistentVolumeDeleteCollectionRequest) GetId() string {
	return "v1.PersistentVolume.DeleteCollection";	
}

func (r * PersistentVolumeGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumeGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name,r.GetOptions)
	return result, err	
}

func (r * PersistentVolumeGetRequest) GetId() string {
	return "v1.PersistentVolume.Get";	
}

func (r * PersistentVolumeListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumeListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err	
}

func (r * PersistentVolumeListRequest) GetId() string {
	return "v1.PersistentVolume.List";	
}

func (r * PersistentVolumeWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumeWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err	
}

func (r * PersistentVolumeWatchRequest) GetId() string {
	return "v1.PersistentVolume.Watch";	
}

func (r * PersistentVolumePatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.PersistentVolumeInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.PersistentVolumeInterface", service)
	}
	return nil
}

func (r * PersistentVolumePatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name,r.Pt,r.Data,r.Subresources...)
	return result, err	
}

func (r * PersistentVolumePatchRequest) GetId() string {
	return "v1.PersistentVolume.Patch";	
}
