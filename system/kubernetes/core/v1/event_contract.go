package v1



import (
	"fmt"
"errors"
	"k8s.io/client-go/kubernetes/typed/core/v1"
	vvc "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"	
)

/*autogenerated contract adapter*/

//EventCreateRequest represents request
type EventCreateRequest struct {
  service_ v1.EventInterface
  Event *vvc.Event
}

//EventUpdateRequest represents request
type EventUpdateRequest struct {
  service_ v1.EventInterface
  Event *vvc.Event
}

//EventDeleteRequest represents request
type EventDeleteRequest struct {
  service_ v1.EventInterface
  Name string
  Options *metav1.DeleteOptions
}

//EventDeleteCollectionRequest represents request
type EventDeleteCollectionRequest struct {
  service_ v1.EventInterface
  Options *metav1.DeleteOptions
  ListOptions metav1.ListOptions
}

//EventGetRequest represents request
type EventGetRequest struct {
  service_ v1.EventInterface
  Name string
  Options metav1.GetOptions
}

//EventListRequest represents request
type EventListRequest struct {
  service_ v1.EventInterface
  Opts metav1.ListOptions
}

//EventWatchRequest represents request
type EventWatchRequest struct {
  service_ v1.EventInterface
  Opts metav1.ListOptions
}

//EventPatchRequest represents request
type EventPatchRequest struct {
  service_ v1.EventInterface
  Name string
  Pt types.PatchType
  Data []byte
  Subresources []string
}


func init() {
	register(&EventCreateRequest{})
	register(&EventUpdateRequest{})
	register(&EventDeleteRequest{})
	register(&EventDeleteCollectionRequest{})
	register(&EventGetRequest{})
	register(&EventListRequest{})
	register(&EventWatchRequest{})
	register(&EventPatchRequest{})
}


func (r * EventCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.EventInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.EventInterface", service)
	}
	return nil
}

func (r * EventCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.Event)
	return result, err	
}

func (r * EventCreateRequest) GetId() string {
	return "v1.EventInterface.Create";	
}

func (r * EventUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.EventInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.EventInterface", service)
	}
	return nil
}

func (r * EventUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.Event)
	return result, err	
}

func (r * EventUpdateRequest) GetId() string {
	return "v1.EventInterface.Update";	
}

func (r * EventDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.EventInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.EventInterface", service)
	}
	return nil
}

func (r * EventDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name,r.Options)
	return result, err	
}

func (r * EventDeleteRequest) GetId() string {
	return "v1.EventInterface.Delete";	
}

func (r * EventDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.EventInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.EventInterface", service)
	}
	return nil
}

func (r * EventDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.Options,r.ListOptions)
	return result, err	
}

func (r * EventDeleteCollectionRequest) GetId() string {
	return "v1.EventInterface.DeleteCollection";	
}

func (r * EventGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.EventInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.EventInterface", service)
	}
	return nil
}

func (r * EventGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name,r.Options)
	return result, err	
}

func (r * EventGetRequest) GetId() string {
	return "v1.EventInterface.Get";	
}

func (r * EventListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.EventInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.EventInterface", service)
	}
	return nil
}

func (r * EventListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.Opts)
	return result, err	
}

func (r * EventListRequest) GetId() string {
	return "v1.EventInterface.List";	
}

func (r * EventWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.EventInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.EventInterface", service)
	}
	return nil
}

func (r * EventWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.Opts)
	return result, err	
}

func (r * EventWatchRequest) GetId() string {
	return "v1.EventInterface.Watch";	
}

func (r * EventPatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.EventInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.EventInterface", service)
	}
	return nil
}

func (r * EventPatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name,r.Pt,r.Data,r.Subresources...)
	return result, err	
}

func (r * EventPatchRequest) GetId() string {
	return "v1.EventInterface.Patch";	
}
