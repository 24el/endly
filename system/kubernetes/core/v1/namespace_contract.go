package v1



import (
	"fmt"
"errors"
	"k8s.io/client-go/kubernetes/typed/core/v1"
	vvc "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"	
)

/*autogenerated contract adapter*/

//NamespaceCreateRequest represents request
type NamespaceCreateRequest struct {
  service_ v1.NamespaceInterface
   *vvc.Namespace
}

//NamespaceUpdateRequest represents request
type NamespaceUpdateRequest struct {
  service_ v1.NamespaceInterface
   *vvc.Namespace
}

//NamespaceUpdateStatusRequest represents request
type NamespaceUpdateStatusRequest struct {
  service_ v1.NamespaceInterface
   *vvc.Namespace
}

//NamespaceDeleteRequest represents request
type NamespaceDeleteRequest struct {
  service_ v1.NamespaceInterface
  Name string
   *metav1.DeleteOptions
}

//NamespaceGetRequest represents request
type NamespaceGetRequest struct {
  service_ v1.NamespaceInterface
  Name string
   metav1.GetOptions
}

//NamespaceListRequest represents request
type NamespaceListRequest struct {
  service_ v1.NamespaceInterface
   metav1.ListOptions
}

//NamespaceWatchRequest represents request
type NamespaceWatchRequest struct {
  service_ v1.NamespaceInterface
   metav1.ListOptions
}

//NamespacePatchRequest represents request
type NamespacePatchRequest struct {
  service_ v1.NamespaceInterface
  Name string
  Pt types.PatchType
  Data []byte
  Subresources []string
}


func init() {
	register(&NamespaceCreateRequest{})
	register(&NamespaceUpdateRequest{})
	register(&NamespaceUpdateStatusRequest{})
	register(&NamespaceDeleteRequest{})
	register(&NamespaceGetRequest{})
	register(&NamespaceListRequest{})
	register(&NamespaceWatchRequest{})
	register(&NamespacePatchRequest{})
}


func (r * NamespaceCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.NamespaceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.NamespaceInterface", service)
	}
	return nil
}

func (r * NamespaceCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.Namespace)
	return result, err	
}

func (r * NamespaceCreateRequest) GetId() string {
	return "v1.Namespace.Create";	
}

func (r * NamespaceUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.NamespaceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.NamespaceInterface", service)
	}
	return nil
}

func (r * NamespaceUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.Namespace)
	return result, err	
}

func (r * NamespaceUpdateRequest) GetId() string {
	return "v1.Namespace.Update";	
}

func (r * NamespaceUpdateStatusRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.NamespaceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.NamespaceInterface", service)
	}
	return nil
}

func (r * NamespaceUpdateStatusRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.UpdateStatus(r.Namespace)
	return result, err	
}

func (r * NamespaceUpdateStatusRequest) GetId() string {
	return "v1.Namespace.UpdateStatus";	
}

func (r * NamespaceDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.NamespaceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.NamespaceInterface", service)
	}
	return nil
}

func (r * NamespaceDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name,r.DeleteOptions)
	return result, err	
}

func (r * NamespaceDeleteRequest) GetId() string {
	return "v1.Namespace.Delete";	
}

func (r * NamespaceGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.NamespaceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.NamespaceInterface", service)
	}
	return nil
}

func (r * NamespaceGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name,r.GetOptions)
	return result, err	
}

func (r * NamespaceGetRequest) GetId() string {
	return "v1.Namespace.Get";	
}

func (r * NamespaceListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.NamespaceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.NamespaceInterface", service)
	}
	return nil
}

func (r * NamespaceListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err	
}

func (r * NamespaceListRequest) GetId() string {
	return "v1.Namespace.List";	
}

func (r * NamespaceWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.NamespaceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.NamespaceInterface", service)
	}
	return nil
}

func (r * NamespaceWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err	
}

func (r * NamespaceWatchRequest) GetId() string {
	return "v1.Namespace.Watch";	
}

func (r * NamespacePatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.NamespaceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.NamespaceInterface", service)
	}
	return nil
}

func (r * NamespacePatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name,r.Pt,r.Data,r.Subresources...)
	return result, err	
}

func (r * NamespacePatchRequest) GetId() string {
	return "v1.Namespace.Patch";	
}
