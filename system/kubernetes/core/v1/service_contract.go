package v1



import (
	"fmt"
"errors"
	"k8s.io/client-go/kubernetes/typed/core/v1"
	types "k8s.io/apimachinery/pkg/types"
	vvc "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"	
)

/*autogenerated contract adapter*/

//ServiceCreateRequest represents request
type ServiceCreateRequest struct {
  service_ v1.ServiceInterface
   *vvc.Service
}

//ServiceUpdateRequest represents request
type ServiceUpdateRequest struct {
  service_ v1.ServiceInterface
   *vvc.Service
}

//ServiceUpdateStatusRequest represents request
type ServiceUpdateStatusRequest struct {
  service_ v1.ServiceInterface
   *vvc.Service
}

//ServiceDeleteRequest represents request
type ServiceDeleteRequest struct {
  service_ v1.ServiceInterface
  Name string
   *metav1.DeleteOptions
}

//ServiceGetRequest represents request
type ServiceGetRequest struct {
  service_ v1.ServiceInterface
  Name string
   metav1.GetOptions
}

//ServiceListRequest represents request
type ServiceListRequest struct {
  service_ v1.ServiceInterface
   metav1.ListOptions
}

//ServiceWatchRequest represents request
type ServiceWatchRequest struct {
  service_ v1.ServiceInterface
   metav1.ListOptions
}

//ServicePatchRequest represents request
type ServicePatchRequest struct {
  service_ v1.ServiceInterface
  Name string
  Pt types.PatchType
  Data []byte
  Subresources []string
}


func init() {
	register(&ServiceCreateRequest{})
	register(&ServiceUpdateRequest{})
	register(&ServiceUpdateStatusRequest{})
	register(&ServiceDeleteRequest{})
	register(&ServiceGetRequest{})
	register(&ServiceListRequest{})
	register(&ServiceWatchRequest{})
	register(&ServicePatchRequest{})
}


func (r * ServiceCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ServiceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ServiceInterface", service)
	}
	return nil
}

func (r * ServiceCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.Service)
	return result, err	
}

func (r * ServiceCreateRequest) GetId() string {
	return "v1.Service.Create";	
}

func (r * ServiceUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ServiceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ServiceInterface", service)
	}
	return nil
}

func (r * ServiceUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.Service)
	return result, err	
}

func (r * ServiceUpdateRequest) GetId() string {
	return "v1.Service.Update";	
}

func (r * ServiceUpdateStatusRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ServiceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ServiceInterface", service)
	}
	return nil
}

func (r * ServiceUpdateStatusRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.UpdateStatus(r.Service)
	return result, err	
}

func (r * ServiceUpdateStatusRequest) GetId() string {
	return "v1.Service.UpdateStatus";	
}

func (r * ServiceDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ServiceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ServiceInterface", service)
	}
	return nil
}

func (r * ServiceDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name,r.DeleteOptions)
	return result, err	
}

func (r * ServiceDeleteRequest) GetId() string {
	return "v1.Service.Delete";	
}

func (r * ServiceGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ServiceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ServiceInterface", service)
	}
	return nil
}

func (r * ServiceGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name,r.GetOptions)
	return result, err	
}

func (r * ServiceGetRequest) GetId() string {
	return "v1.Service.Get";	
}

func (r * ServiceListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ServiceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ServiceInterface", service)
	}
	return nil
}

func (r * ServiceListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err	
}

func (r * ServiceListRequest) GetId() string {
	return "v1.Service.List";	
}

func (r * ServiceWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ServiceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ServiceInterface", service)
	}
	return nil
}

func (r * ServiceWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err	
}

func (r * ServiceWatchRequest) GetId() string {
	return "v1.Service.Watch";	
}

func (r * ServicePatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ServiceInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ServiceInterface", service)
	}
	return nil
}

func (r * ServicePatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name,r.Pt,r.Data,r.Subresources...)
	return result, err	
}

func (r * ServicePatchRequest) GetId() string {
	return "v1.Service.Patch";	
}
