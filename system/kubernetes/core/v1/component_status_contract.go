package v1



import (
	"fmt"
"errors"
	"k8s.io/client-go/kubernetes/typed/core/v1"
	vvc "k8s.io/api/core/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"	
)

/*autogenerated contract adapter*/

//ComponentStatusCreateRequest represents request
type ComponentStatusCreateRequest struct {
  service_ v1.ComponentStatusInterface
   *vvc.ComponentStatus
}

//ComponentStatusUpdateRequest represents request
type ComponentStatusUpdateRequest struct {
  service_ v1.ComponentStatusInterface
   *vvc.ComponentStatus
}

//ComponentStatusDeleteRequest represents request
type ComponentStatusDeleteRequest struct {
  service_ v1.ComponentStatusInterface
  Name string
   *metav1.DeleteOptions
}

//ComponentStatusDeleteCollectionRequest represents request
type ComponentStatusDeleteCollectionRequest struct {
  service_ v1.ComponentStatusInterface
   *metav1.DeleteOptions
  ListOptions metav1.ListOptions
}

//ComponentStatusGetRequest represents request
type ComponentStatusGetRequest struct {
  service_ v1.ComponentStatusInterface
  Name string
   metav1.GetOptions
}

//ComponentStatusListRequest represents request
type ComponentStatusListRequest struct {
  service_ v1.ComponentStatusInterface
   metav1.ListOptions
}

//ComponentStatusWatchRequest represents request
type ComponentStatusWatchRequest struct {
  service_ v1.ComponentStatusInterface
   metav1.ListOptions
}

//ComponentStatusPatchRequest represents request
type ComponentStatusPatchRequest struct {
  service_ v1.ComponentStatusInterface
  Name string
  Pt types.PatchType
  Data []byte
  Subresources []string
}


func init() {
	register(&ComponentStatusCreateRequest{})
	register(&ComponentStatusUpdateRequest{})
	register(&ComponentStatusDeleteRequest{})
	register(&ComponentStatusDeleteCollectionRequest{})
	register(&ComponentStatusGetRequest{})
	register(&ComponentStatusListRequest{})
	register(&ComponentStatusWatchRequest{})
	register(&ComponentStatusPatchRequest{})
}


func (r * ComponentStatusCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ComponentStatusInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ComponentStatusInterface", service)
	}
	return nil
}

func (r * ComponentStatusCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.ComponentStatus)
	return result, err	
}

func (r * ComponentStatusCreateRequest) GetId() string {
	return "v1.ComponentStatus.Create";	
}

func (r * ComponentStatusUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ComponentStatusInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ComponentStatusInterface", service)
	}
	return nil
}

func (r * ComponentStatusUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.ComponentStatus)
	return result, err	
}

func (r * ComponentStatusUpdateRequest) GetId() string {
	return "v1.ComponentStatus.Update";	
}

func (r * ComponentStatusDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ComponentStatusInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ComponentStatusInterface", service)
	}
	return nil
}

func (r * ComponentStatusDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name,r.DeleteOptions)
	return result, err	
}

func (r * ComponentStatusDeleteRequest) GetId() string {
	return "v1.ComponentStatus.Delete";	
}

func (r * ComponentStatusDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ComponentStatusInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ComponentStatusInterface", service)
	}
	return nil
}

func (r * ComponentStatusDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions,r.ListOptions)
	return result, err	
}

func (r * ComponentStatusDeleteCollectionRequest) GetId() string {
	return "v1.ComponentStatus.DeleteCollection";	
}

func (r * ComponentStatusGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ComponentStatusInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ComponentStatusInterface", service)
	}
	return nil
}

func (r * ComponentStatusGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name,r.GetOptions)
	return result, err	
}

func (r * ComponentStatusGetRequest) GetId() string {
	return "v1.ComponentStatus.Get";	
}

func (r * ComponentStatusListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ComponentStatusInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ComponentStatusInterface", service)
	}
	return nil
}

func (r * ComponentStatusListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err	
}

func (r * ComponentStatusListRequest) GetId() string {
	return "v1.ComponentStatus.List";	
}

func (r * ComponentStatusWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ComponentStatusInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ComponentStatusInterface", service)
	}
	return nil
}

func (r * ComponentStatusWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err	
}

func (r * ComponentStatusWatchRequest) GetId() string {
	return "v1.ComponentStatus.Watch";	
}

func (r * ComponentStatusPatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ComponentStatusInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ComponentStatusInterface", service)
	}
	return nil
}

func (r * ComponentStatusPatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name,r.Pt,r.Data,r.Subresources...)
	return result, err	
}

func (r * ComponentStatusPatchRequest) GetId() string {
	return "v1.ComponentStatus.Patch";	
}
