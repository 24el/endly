package v1

import (
	"errors"
	"fmt"
	vvc "k8s.io/api/batch/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes/typed/batch/v1"
)

/*autogenerated contract adapter*/

// JobCreateRequest represents request
type JobCreateRequest struct {
	service_ v1.JobInterface
	*vvc.Job
}

// JobUpdateRequest represents request
type JobUpdateRequest struct {
	service_ v1.JobInterface
	*vvc.Job
}

// JobUpdateStatusRequest represents request
type JobUpdateStatusRequest struct {
	service_ v1.JobInterface
	*vvc.Job
}

// JobDeleteRequest represents request
type JobDeleteRequest struct {
	service_ v1.JobInterface
	Name     string
	*metav1.DeleteOptions
}

// JobDeleteCollectionRequest represents request
type JobDeleteCollectionRequest struct {
	service_ v1.JobInterface
	*metav1.DeleteOptions
	ListOptions metav1.ListOptions
}

// JobGetRequest represents request
type JobGetRequest struct {
	service_ v1.JobInterface
	Name     string
	metav1.GetOptions
}

// JobListRequest represents request
type JobListRequest struct {
	service_ v1.JobInterface
	metav1.ListOptions
}

// JobWatchRequest represents request
type JobWatchRequest struct {
	service_ v1.JobInterface
	metav1.ListOptions
}

// JobPatchRequest represents request
type JobPatchRequest struct {
	service_     v1.JobInterface
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
}

func init() {
	register(&JobCreateRequest{})
	register(&JobUpdateRequest{})
	register(&JobUpdateStatusRequest{})
	register(&JobDeleteRequest{})
	register(&JobDeleteCollectionRequest{})
	register(&JobGetRequest{})
	register(&JobListRequest{})
	register(&JobWatchRequest{})
	register(&JobPatchRequest{})
}

func (r *JobCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.Job)
	return result, err
}

func (r *JobCreateRequest) GetId() string {
	return "batch/v1.Job.Create"
}

func (r *JobUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.Job)
	return result, err
}

func (r *JobUpdateRequest) GetId() string {
	return "batch/v1.Job.Update"
}

func (r *JobUpdateStatusRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobUpdateStatusRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.UpdateStatus(r.Job)
	return result, err
}

func (r *JobUpdateStatusRequest) GetId() string {
	return "batch/v1.Job.UpdateStatus"
}

func (r *JobDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name, r.DeleteOptions)
	return result, err
}

func (r *JobDeleteRequest) GetId() string {
	return "batch/v1.Job.Delete"
}

func (r *JobDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions, r.ListOptions)
	return result, err
}

func (r *JobDeleteCollectionRequest) GetId() string {
	return "batch/v1.Job.DeleteCollection"
}

func (r *JobGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name, r.GetOptions)
	return result, err
}

func (r *JobGetRequest) GetId() string {
	return "batch/v1.Job.Get"
}

func (r *JobListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err
}

func (r *JobListRequest) GetId() string {
	return "batch/v1.Job.List"
}

func (r *JobWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err
}

func (r *JobWatchRequest) GetId() string {
	return "batch/v1.Job.Watch"
}

func (r *JobPatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.JobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.JobInterface", service)
	}
	return nil
}

func (r *JobPatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name, r.Pt, r.Data, r.Subresources...)
	return result, err
}

func (r *JobPatchRequest) GetId() string {
	return "batch/v1.Job.Patch"
}
