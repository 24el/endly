package v1beta1

import (
	"errors"
	"fmt"
	vvc "k8s.io/api/batch/v1beta1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes/typed/batch/v1beta1"
)

/*autogenerated contract adapter*/

//CronJobCreateRequest represents request
type CronJobCreateRequest struct {
	service_ v1beta1.CronJobInterface
	*vvc.CronJob
}

//CronJobUpdateRequest represents request
type CronJobUpdateRequest struct {
	service_ v1beta1.CronJobInterface
	*vvc.CronJob
}

//CronJobUpdateStatusRequest represents request
type CronJobUpdateStatusRequest struct {
	service_ v1beta1.CronJobInterface
	*vvc.CronJob
}

//CronJobDeleteRequest represents request
type CronJobDeleteRequest struct {
	service_ v1beta1.CronJobInterface
	Name     string
	*v1.DeleteOptions
}

//CronJobDeleteCollectionRequest represents request
type CronJobDeleteCollectionRequest struct {
	service_ v1beta1.CronJobInterface
	*v1.DeleteOptions
	ListOptions v1.ListOptions
}

//CronJobGetRequest represents request
type CronJobGetRequest struct {
	service_ v1beta1.CronJobInterface
	Name     string
	v1.GetOptions
}

//CronJobListRequest represents request
type CronJobListRequest struct {
	service_ v1beta1.CronJobInterface
	v1.ListOptions
}

//CronJobWatchRequest represents request
type CronJobWatchRequest struct {
	service_ v1beta1.CronJobInterface
	v1.ListOptions
}

//CronJobPatchRequest represents request
type CronJobPatchRequest struct {
	service_     v1beta1.CronJobInterface
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
}

func init() {
	register(&CronJobCreateRequest{})
	register(&CronJobUpdateRequest{})
	register(&CronJobUpdateStatusRequest{})
	register(&CronJobDeleteRequest{})
	register(&CronJobDeleteCollectionRequest{})
	register(&CronJobGetRequest{})
	register(&CronJobListRequest{})
	register(&CronJobWatchRequest{})
	register(&CronJobPatchRequest{})
}

func (r *CronJobCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.CronJob)
	return result, err
}

func (r *CronJobCreateRequest) GetId() string {
	return "batch/v1beta1.CronJob.Create"
}

func (r *CronJobUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.CronJob)
	return result, err
}

func (r *CronJobUpdateRequest) GetId() string {
	return "batch/v1beta1.CronJob.Update"
}

func (r *CronJobUpdateStatusRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobUpdateStatusRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.UpdateStatus(r.CronJob)
	return result, err
}

func (r *CronJobUpdateStatusRequest) GetId() string {
	return "batch/v1beta1.CronJob.UpdateStatus"
}

func (r *CronJobDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name, r.DeleteOptions)
	return result, err
}

func (r *CronJobDeleteRequest) GetId() string {
	return "batch/v1beta1.CronJob.Delete"
}

func (r *CronJobDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions, r.ListOptions)
	return result, err
}

func (r *CronJobDeleteCollectionRequest) GetId() string {
	return "batch/v1beta1.CronJob.DeleteCollection"
}

func (r *CronJobGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name, r.GetOptions)
	return result, err
}

func (r *CronJobGetRequest) GetId() string {
	return "batch/v1beta1.CronJob.Get"
}

func (r *CronJobListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err
}

func (r *CronJobListRequest) GetId() string {
	return "batch/v1beta1.CronJob.List"
}

func (r *CronJobWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err
}

func (r *CronJobWatchRequest) GetId() string {
	return "batch/v1beta1.CronJob.Watch"
}

func (r *CronJobPatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta1.CronJobInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta1.CronJobInterface", service)
	}
	return nil
}

func (r *CronJobPatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name, r.Pt, r.Data, r.Subresources...)
	return result, err
}

func (r *CronJobPatchRequest) GetId() string {
	return "batch/v1beta1.CronJob.Patch"
}
