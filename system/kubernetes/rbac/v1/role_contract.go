package v1

import (
	"errors"
	"fmt"
	vvc "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes/typed/rbac/v1"
)

/*autogenerated contract adapter*/

//RoleCreateRequest represents request
type RoleCreateRequest struct {
	service_ v1.RoleInterface
	*vvc.Role
}

//RoleUpdateRequest represents request
type RoleUpdateRequest struct {
	service_ v1.RoleInterface
	*vvc.Role
}

//RoleDeleteRequest represents request
type RoleDeleteRequest struct {
	service_ v1.RoleInterface
	Name     string
	*metav1.DeleteOptions
}

//RoleDeleteCollectionRequest represents request
type RoleDeleteCollectionRequest struct {
	service_ v1.RoleInterface
	*metav1.DeleteOptions
	ListOptions metav1.ListOptions
}

//RoleGetRequest represents request
type RoleGetRequest struct {
	service_ v1.RoleInterface
	Name     string
	metav1.GetOptions
}

//RoleListRequest represents request
type RoleListRequest struct {
	service_ v1.RoleInterface
	metav1.ListOptions
}

//RoleWatchRequest represents request
type RoleWatchRequest struct {
	service_ v1.RoleInterface
	metav1.ListOptions
}

//RolePatchRequest represents request
type RolePatchRequest struct {
	service_     v1.RoleInterface
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
}

func init() {
	register(&RoleCreateRequest{})
	register(&RoleUpdateRequest{})
	register(&RoleDeleteRequest{})
	register(&RoleDeleteCollectionRequest{})
	register(&RoleGetRequest{})
	register(&RoleListRequest{})
	register(&RoleWatchRequest{})
	register(&RolePatchRequest{})
}

func (r *RoleCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.RoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.RoleInterface", service)
	}
	return nil
}

func (r *RoleCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.Role)
	return result, err
}

func (r *RoleCreateRequest) GetId() string {
	return "rbac/v1.Role.Create"
}

func (r *RoleUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.RoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.RoleInterface", service)
	}
	return nil
}

func (r *RoleUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.Role)
	return result, err
}

func (r *RoleUpdateRequest) GetId() string {
	return "rbac/v1.Role.Update"
}

func (r *RoleDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.RoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.RoleInterface", service)
	}
	return nil
}

func (r *RoleDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name, r.DeleteOptions)
	return result, err
}

func (r *RoleDeleteRequest) GetId() string {
	return "rbac/v1.Role.Delete"
}

func (r *RoleDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.RoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.RoleInterface", service)
	}
	return nil
}

func (r *RoleDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions, r.ListOptions)
	return result, err
}

func (r *RoleDeleteCollectionRequest) GetId() string {
	return "rbac/v1.Role.DeleteCollection"
}

func (r *RoleGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.RoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.RoleInterface", service)
	}
	return nil
}

func (r *RoleGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name, r.GetOptions)
	return result, err
}

func (r *RoleGetRequest) GetId() string {
	return "rbac/v1.Role.Get"
}

func (r *RoleListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.RoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.RoleInterface", service)
	}
	return nil
}

func (r *RoleListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err
}

func (r *RoleListRequest) GetId() string {
	return "rbac/v1.Role.List"
}

func (r *RoleWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.RoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.RoleInterface", service)
	}
	return nil
}

func (r *RoleWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err
}

func (r *RoleWatchRequest) GetId() string {
	return "rbac/v1.Role.Watch"
}

func (r *RolePatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.RoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.RoleInterface", service)
	}
	return nil
}

func (r *RolePatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name, r.Pt, r.Data, r.Subresources...)
	return result, err
}

func (r *RolePatchRequest) GetId() string {
	return "rbac/v1.Role.Patch"
}
