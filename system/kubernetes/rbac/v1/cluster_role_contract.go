package v1



import (
	"fmt"
"errors"
	"k8s.io/client-go/kubernetes/typed/rbac/v1"
	types "k8s.io/apimachinery/pkg/types"
	vvc "k8s.io/api/rbac/v1"
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"	
)

/*autogenerated contract adapter*/

//ClusterRoleCreateRequest represents request
type ClusterRoleCreateRequest struct {
  service_ v1.ClusterRoleInterface
   *vvc.ClusterRole
}

//ClusterRoleUpdateRequest represents request
type ClusterRoleUpdateRequest struct {
  service_ v1.ClusterRoleInterface
   *vvc.ClusterRole
}

//ClusterRoleDeleteRequest represents request
type ClusterRoleDeleteRequest struct {
  service_ v1.ClusterRoleInterface
  Name string
   *metav1.DeleteOptions
}

//ClusterRoleDeleteCollectionRequest represents request
type ClusterRoleDeleteCollectionRequest struct {
  service_ v1.ClusterRoleInterface
   *metav1.DeleteOptions
  ListOptions metav1.ListOptions
}

//ClusterRoleGetRequest represents request
type ClusterRoleGetRequest struct {
  service_ v1.ClusterRoleInterface
  Name string
   metav1.GetOptions
}

//ClusterRoleListRequest represents request
type ClusterRoleListRequest struct {
  service_ v1.ClusterRoleInterface
   metav1.ListOptions
}

//ClusterRoleWatchRequest represents request
type ClusterRoleWatchRequest struct {
  service_ v1.ClusterRoleInterface
   metav1.ListOptions
}

//ClusterRolePatchRequest represents request
type ClusterRolePatchRequest struct {
  service_ v1.ClusterRoleInterface
  Name string
  Pt types.PatchType
  Data []byte
  Subresources []string
}


func init() {
	register(&ClusterRoleCreateRequest{})
	register(&ClusterRoleUpdateRequest{})
	register(&ClusterRoleDeleteRequest{})
	register(&ClusterRoleDeleteCollectionRequest{})
	register(&ClusterRoleGetRequest{})
	register(&ClusterRoleListRequest{})
	register(&ClusterRoleWatchRequest{})
	register(&ClusterRolePatchRequest{})
}


func (r * ClusterRoleCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ClusterRoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ClusterRoleInterface", service)
	}
	return nil
}

func (r * ClusterRoleCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.ClusterRole)
	return result, err	
}

func (r * ClusterRoleCreateRequest) GetId() string {
	return "rbac/v1.ClusterRole.Create";	
}

func (r * ClusterRoleUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ClusterRoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ClusterRoleInterface", service)
	}
	return nil
}

func (r * ClusterRoleUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.ClusterRole)
	return result, err	
}

func (r * ClusterRoleUpdateRequest) GetId() string {
	return "rbac/v1.ClusterRole.Update";	
}

func (r * ClusterRoleDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ClusterRoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ClusterRoleInterface", service)
	}
	return nil
}

func (r * ClusterRoleDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name,r.DeleteOptions)
	return result, err	
}

func (r * ClusterRoleDeleteRequest) GetId() string {
	return "rbac/v1.ClusterRole.Delete";	
}

func (r * ClusterRoleDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ClusterRoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ClusterRoleInterface", service)
	}
	return nil
}

func (r * ClusterRoleDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions,r.ListOptions)
	return result, err	
}

func (r * ClusterRoleDeleteCollectionRequest) GetId() string {
	return "rbac/v1.ClusterRole.DeleteCollection";	
}

func (r * ClusterRoleGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ClusterRoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ClusterRoleInterface", service)
	}
	return nil
}

func (r * ClusterRoleGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name,r.GetOptions)
	return result, err	
}

func (r * ClusterRoleGetRequest) GetId() string {
	return "rbac/v1.ClusterRole.Get";	
}

func (r * ClusterRoleListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ClusterRoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ClusterRoleInterface", service)
	}
	return nil
}

func (r * ClusterRoleListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err	
}

func (r * ClusterRoleListRequest) GetId() string {
	return "rbac/v1.ClusterRole.List";	
}

func (r * ClusterRoleWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ClusterRoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ClusterRoleInterface", service)
	}
	return nil
}

func (r * ClusterRoleWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err	
}

func (r * ClusterRoleWatchRequest) GetId() string {
	return "rbac/v1.ClusterRole.Watch";	
}

func (r * ClusterRolePatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1.ClusterRoleInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1.ClusterRoleInterface", service)
	}
	return nil
}

func (r * ClusterRolePatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name,r.Pt,r.Data,r.Subresources...)
	return result, err	
}

func (r * ClusterRolePatchRequest) GetId() string {
	return "rbac/v1.ClusterRole.Patch";	
}
