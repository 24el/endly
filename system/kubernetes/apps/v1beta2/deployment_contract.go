package v1beta2

import (
	"errors"
	"fmt"
	vvc "k8s.io/api/apps/v1beta2"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	types "k8s.io/apimachinery/pkg/types"
	"k8s.io/client-go/kubernetes/typed/apps/v1beta2"
)

/*autogenerated contract adapter*/

// DeploymentCreateRequest represents request
type DeploymentCreateRequest struct {
	service_ v1beta2.DeploymentInterface
	*vvc.Deployment
}

// DeploymentUpdateRequest represents request
type DeploymentUpdateRequest struct {
	service_ v1beta2.DeploymentInterface
	*vvc.Deployment
}

// DeploymentUpdateStatusRequest represents request
type DeploymentUpdateStatusRequest struct {
	service_ v1beta2.DeploymentInterface
	*vvc.Deployment
}

// DeploymentDeleteRequest represents request
type DeploymentDeleteRequest struct {
	service_ v1beta2.DeploymentInterface
	Name     string
	*v1.DeleteOptions
}

// DeploymentDeleteCollectionRequest represents request
type DeploymentDeleteCollectionRequest struct {
	service_ v1beta2.DeploymentInterface
	*v1.DeleteOptions
	ListOptions v1.ListOptions
}

// DeploymentGetRequest represents request
type DeploymentGetRequest struct {
	service_ v1beta2.DeploymentInterface
	Name     string
	v1.GetOptions
}

// DeploymentListRequest represents request
type DeploymentListRequest struct {
	service_ v1beta2.DeploymentInterface
	v1.ListOptions
}

// DeploymentWatchRequest represents request
type DeploymentWatchRequest struct {
	service_ v1beta2.DeploymentInterface
	v1.ListOptions
}

// DeploymentPatchRequest represents request
type DeploymentPatchRequest struct {
	service_     v1beta2.DeploymentInterface
	Name         string
	Pt           types.PatchType
	Data         []byte
	Subresources []string
}

func init() {
	register(&DeploymentCreateRequest{})
	register(&DeploymentUpdateRequest{})
	register(&DeploymentUpdateStatusRequest{})
	register(&DeploymentDeleteRequest{})
	register(&DeploymentDeleteCollectionRequest{})
	register(&DeploymentGetRequest{})
	register(&DeploymentListRequest{})
	register(&DeploymentWatchRequest{})
	register(&DeploymentPatchRequest{})
}

func (r *DeploymentCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.Deployment)
	return result, err
}

func (r *DeploymentCreateRequest) GetId() string {
	return "apps/v1beta2.Deployment.Create"
}

func (r *DeploymentUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.Deployment)
	return result, err
}

func (r *DeploymentUpdateRequest) GetId() string {
	return "apps/v1beta2.Deployment.Update"
}

func (r *DeploymentUpdateStatusRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentUpdateStatusRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.UpdateStatus(r.Deployment)
	return result, err
}

func (r *DeploymentUpdateStatusRequest) GetId() string {
	return "apps/v1beta2.Deployment.UpdateStatus"
}

func (r *DeploymentDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name, r.DeleteOptions)
	return result, err
}

func (r *DeploymentDeleteRequest) GetId() string {
	return "apps/v1beta2.Deployment.Delete"
}

func (r *DeploymentDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions, r.ListOptions)
	return result, err
}

func (r *DeploymentDeleteCollectionRequest) GetId() string {
	return "apps/v1beta2.Deployment.DeleteCollection"
}

func (r *DeploymentGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name, r.GetOptions)
	return result, err
}

func (r *DeploymentGetRequest) GetId() string {
	return "apps/v1beta2.Deployment.Get"
}

func (r *DeploymentListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err
}

func (r *DeploymentListRequest) GetId() string {
	return "apps/v1beta2.Deployment.List"
}

func (r *DeploymentWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err
}

func (r *DeploymentWatchRequest) GetId() string {
	return "apps/v1beta2.Deployment.Watch"
}

func (r *DeploymentPatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1beta2.DeploymentInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1beta2.DeploymentInterface", service)
	}
	return nil
}

func (r *DeploymentPatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name, r.Pt, r.Data, r.Subresources...)
	return result, err
}

func (r *DeploymentPatchRequest) GetId() string {
	return "apps/v1beta2.Deployment.Patch"
}
