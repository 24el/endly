package v1alpha1



import (
	"fmt"
"errors"
	"k8s.io/client-go/kubernetes/typed/settings/v1alpha1"
	types "k8s.io/apimachinery/pkg/types"
	vvc "k8s.io/api/settings/v1alpha1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"	
)

/*autogenerated contract adapter*/

//PodPresetCreateRequest represents request
type PodPresetCreateRequest struct {
  service_ v1alpha1.PodPresetInterface
   *vvc.PodPreset
}

//PodPresetUpdateRequest represents request
type PodPresetUpdateRequest struct {
  service_ v1alpha1.PodPresetInterface
   *vvc.PodPreset
}

//PodPresetDeleteRequest represents request
type PodPresetDeleteRequest struct {
  service_ v1alpha1.PodPresetInterface
  Name string
   *v1.DeleteOptions
}

//PodPresetDeleteCollectionRequest represents request
type PodPresetDeleteCollectionRequest struct {
  service_ v1alpha1.PodPresetInterface
   *v1.DeleteOptions
  ListOptions v1.ListOptions
}

//PodPresetGetRequest represents request
type PodPresetGetRequest struct {
  service_ v1alpha1.PodPresetInterface
  Name string
   v1.GetOptions
}

//PodPresetListRequest represents request
type PodPresetListRequest struct {
  service_ v1alpha1.PodPresetInterface
   v1.ListOptions
}

//PodPresetWatchRequest represents request
type PodPresetWatchRequest struct {
  service_ v1alpha1.PodPresetInterface
   v1.ListOptions
}

//PodPresetPatchRequest represents request
type PodPresetPatchRequest struct {
  service_ v1alpha1.PodPresetInterface
  Name string
  Pt types.PatchType
  Data []byte
  Subresources []string
}


func init() {
	register(&PodPresetCreateRequest{})
	register(&PodPresetUpdateRequest{})
	register(&PodPresetDeleteRequest{})
	register(&PodPresetDeleteCollectionRequest{})
	register(&PodPresetGetRequest{})
	register(&PodPresetListRequest{})
	register(&PodPresetWatchRequest{})
	register(&PodPresetPatchRequest{})
}


func (r * PodPresetCreateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1alpha1.PodPresetInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1alpha1.PodPresetInterface", service)
	}
	return nil
}

func (r * PodPresetCreateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Create(r.PodPreset)
	return result, err	
}

func (r * PodPresetCreateRequest) GetId() string {
	return "settings/v1alpha1.PodPreset.Create";	
}

func (r * PodPresetUpdateRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1alpha1.PodPresetInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1alpha1.PodPresetInterface", service)
	}
	return nil
}

func (r * PodPresetUpdateRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Update(r.PodPreset)
	return result, err	
}

func (r * PodPresetUpdateRequest) GetId() string {
	return "settings/v1alpha1.PodPreset.Update";	
}

func (r * PodPresetDeleteRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1alpha1.PodPresetInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1alpha1.PodPresetInterface", service)
	}
	return nil
}

func (r * PodPresetDeleteRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.Delete(r.Name,r.DeleteOptions)
	return result, err	
}

func (r * PodPresetDeleteRequest) GetId() string {
	return "settings/v1alpha1.PodPreset.Delete";	
}

func (r * PodPresetDeleteCollectionRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1alpha1.PodPresetInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1alpha1.PodPresetInterface", service)
	}
	return nil
}

func (r * PodPresetDeleteCollectionRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	err = r.service_.DeleteCollection(r.DeleteOptions,r.ListOptions)
	return result, err	
}

func (r * PodPresetDeleteCollectionRequest) GetId() string {
	return "settings/v1alpha1.PodPreset.DeleteCollection";	
}

func (r * PodPresetGetRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1alpha1.PodPresetInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1alpha1.PodPresetInterface", service)
	}
	return nil
}

func (r * PodPresetGetRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Get(r.Name,r.GetOptions)
	return result, err	
}

func (r * PodPresetGetRequest) GetId() string {
	return "settings/v1alpha1.PodPreset.Get";	
}

func (r * PodPresetListRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1alpha1.PodPresetInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1alpha1.PodPresetInterface", service)
	}
	return nil
}

func (r * PodPresetListRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.List(r.ListOptions)
	return result, err	
}

func (r * PodPresetListRequest) GetId() string {
	return "settings/v1alpha1.PodPreset.List";	
}

func (r * PodPresetWatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1alpha1.PodPresetInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1alpha1.PodPresetInterface", service)
	}
	return nil
}

func (r * PodPresetWatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Watch(r.ListOptions)
	return result, err	
}

func (r * PodPresetWatchRequest) GetId() string {
	return "settings/v1alpha1.PodPreset.Watch";	
}

func (r * PodPresetPatchRequest) SetService(service interface{}) error {
	var ok bool
	if r.service_, ok = service.(v1alpha1.PodPresetInterface); !ok {
		return fmt.Errorf("invalid service type: %T, expected: v1alpha1.PodPresetInterface", service)
	}
	return nil
}

func (r * PodPresetPatchRequest) Call() (result interface{}, err error) {
	if r.service_ == nil {
		return nil, errors.New("service was empty")
	}
	result, err = r.service_.Patch(r.Name,r.Pt,r.Data,r.Subresources...)
	return result, err	
}

func (r * PodPresetPatchRequest) GetId() string {
	return "settings/v1alpha1.PodPreset.Patch";	
}
