init: '@var/init'
pipeline:
  init:
    selenium:
      action: run
      request: '@req/selenium_init'
      comments: initialize seleniun

    log:
      action: 'validator/log:listen'
      request: '@req/log_listen'
      comments: initialize log listener

    data:
      action: run
      request: '@data_init'
      comments: set initial app state

  test:
    tag: Test
    description: '@use_case'

    data:
      '$dataTarget': '$dataFile'
    comments: add setup data

    subPath: 'use_cases/${index}*'
    range: 1..002
    template:
      skip-tag:
        action: nop
        init: '@var/test_init'
        skip: $HasResource(${subPath}/skip.txt)
        comments: skip tag Id if subdirectory has skip.txt file present

      $datastore-prepare:
        when: '$HasResource(${path}/prepare/${db})'
        action: dsunit:prepare
        request: '@req/prepare'
        db: $datastore
        comments: populate data for use case if data is defined in folder ${path}/prepare/${db}

      seleniun:
        action: selenium:run
        request: '@selenium_test'
        comments: test with selenium runner

      http:
        action: 'http/runner:send'
        request: '@http_test'
        comments: test with http runner

      rest:
        action: 'rest/runner:send'
        request: '@rest_test'
        comments: test with rest runner

      ssh:
        action: exec:run
        request: '@cmd'
        comments: test with SSH commands

      subworkflow:
        action: run
        request: '@run'
        comments: test with sub workflow

      $datastore-expect:
        when: '$HasResource(${path}/expect/${db})'
        action: dsunit:expect
        request: '@req/expect'
        db: $datastore
        comments: verify test $db state after use case

      transaction-logs:
        when: '$HasResource(${path}/expect/logType1.json)'
        action: nop
        init: '@var/push_log @logType1'
        comments: push data from ${path}/expect/logType1.json for post validation if defined


    post-test-sleep:
      action: nop
      sleepTimeMs: 1000
      comments: sleep for extra debuging

    validate-logs:
      when: $Len($logRecords) > 0
      action: 'validator/log:assert'
      request: '@req/log_validate'
      comments: validate log records

  destroy:
    multiAction: true
    sleep:
      action: nop
      sleepTimeMs: 1000

    selenium:
      action: run
      request: '@req/selenium_destroy'
      comments: stops selenium server
