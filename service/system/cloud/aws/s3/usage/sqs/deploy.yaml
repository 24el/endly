init:
  '!awsCredentials': $params.authWith
  appPath: $Pwd('.')
  codeZip: hello.zip
  handler: hello
  functionName: Hello
  privilegePolicy: privilege-policy.json
  bucket: my-teest-bucket-sqs
  queue: my-teest-bucket-queue

pipeline:

  setup:
    createBucket:
      action: storage:create
      isDir: true
      dest:
        URL: s3://${bucket}
        credentials: $awsCredentials
    setupQueue:
      action: msg:setupResource
      credentials: $awsCredentials
      resources:
        - URL: $queue
          type: queue
          vendor: aws

  deploy:
    builc:
      action: exec:run
      target: $target
      checkError: true
      commands:
        - cd ${appPath}
        - unset GOPATH
        - export GOOS=linux
        - export GOARCH=amd64
        - go build -o $handler
        - zip -j hello.zip hello

    deployLambda:
      action: aws/lambda:deploy
      credentials: $awsCredentials
      functionname: $functionName
      runtime:  go1.x
      handler: $handler
      code:
        zipfile: $LoadBinary(${codeZip})
      rolename: lambda-${functionName}-executor
      define:
        - policyname: s3-${functionName}-${bucket}-role
          policydocument: $Cat('${privilegePolicy}')
      attach:
        - policyarn: arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      triggers:
        - source: $queue
          type: sqs
          enabled: true
          batchSize: 1

  setBucketQueueNotification:
    action: aws/s3:setupBucketNotification
    bucket: ${bucket}
    queueConfigurations:
      - queue: $queue
        id: ObjectCreatedEvents
        events:
          - s3:ObjectCreated:*

  test:
    action: storage:upload
    sourceKey: appPath
    dest:
      URL: s3://${bucket}/location.txt
      credentials: $awsCredentials